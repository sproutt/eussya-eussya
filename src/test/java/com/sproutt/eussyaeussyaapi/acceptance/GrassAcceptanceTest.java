package com.sproutt.eussyaeussyaapi.acceptance;

import com.sproutt.eussyaeussyaapi.domain.activity.*;
import com.sproutt.eussyaeussyaapi.domain.grass.Grass;
import com.sproutt.eussyaeussyaapi.domain.grass.GrassRepository;
import com.sproutt.eussyaeussyaapi.domain.member.Member;
import com.sproutt.eussyaeussyaapi.domain.member.MemberRepository;
import com.sproutt.eussyaeussyaapi.domain.mission.Mission;
import com.sproutt.eussyaeussyaapi.object.MemberFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@Tag("integration")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@Transactional
public class GrassAcceptanceTest {

    private Member member;
    private Activity activity;
    private Mission mission;
    private Grass grass;

    @Autowired
    private MemberRepository memberRepository;

    @Autowired
    private GrassRepository grassRepository;

    @Autowired
    private ActivityRepository activityRepository;

    @MockBean
    private CompleteActivityEventHandler completeActivityEventHandler;

    @Test
    public void completeActivityTest() {
        //given
        member = autoGeneratedMember();
        Activity activity = notCompletedActivity();

        //when
        activity.complete();

        //then
        assertThat(activity.getActivityStatus().equals(ActivityStatus.COMPLETE));
    }

    @Test
    public void completeActivityEventTest() {
        //given
        member = autoGeneratedMember();
        Activity activity = notCompletedActivity();

        //when
        activityRepository.save(activity.complete());

        // then
        verify(completeActivityEventHandler, times(1)).onApplicationEvent(any(CompleteActivityEvent.class));
    }

    @Test
    public void completeActivityEventAndGenerateGrassTest() {
        //given
        member = autoGeneratedMember();
        Activity activity = notCompletedActivity();

        //when
        activityRepository.save(activity.complete());

        //then
        Grass grass = grassRepository.findByActivity(activity);
        assertThat(grass.getId()).isEqualTo(activity.getGrass().getId());
    }

    private Member autoGeneratedMember() {
        return memberRepository.getOne(99L);
    }

    private Activity notCompletedActivity() {
        return activityRepository.getOne(58L);
    }

}
